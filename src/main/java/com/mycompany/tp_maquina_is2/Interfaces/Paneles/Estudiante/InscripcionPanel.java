/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.tp_maquina_is2.Interfaces.Paneles.Estudiante;

import com.mycompany.tp_maquina_is2.Logica.Excepciones.ManagementException;
import com.mycompany.tp_maquina_is2.Logica.Managers.EstudianteManager;
import com.mycompany.tp_maquina_is2.Logica.Managers.ExamenManager;
import com.mycompany.tp_maquina_is2.Logica.Managers.PlanEstudiosManager;
import com.mycompany.tp_maquina_is2.Logica.Transferencia.Estudiante;
import com.mycompany.tp_maquina_is2.Logica.Transferencia.Examen;
import com.mycompany.tp_maquina_is2.Logica.Transferencia.Materia;
import com.mycompany.tp_maquina_is2.Logica.Transferencia.MesaExamen;
import java.awt.Color;
import java.awt.Font;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juan_
 */
public class InscripcionPanel extends javax.swing.JPanel {

    private int nroRegistro;
    private String codPlanEstudios;
    private String codMateria;

    /**
     * Creates new form ListaPanel
     */
    public InscripcionPanel(int nroRegistro, String codPlanEstudios,String codMateria) {
        this.nroRegistro = nroRegistro;
        this.codPlanEstudios = codPlanEstudios;
        this.codMateria= codMateria;
        initComponents();
        TablaMesasInscriptas.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        TablaMesasInscriptas.getTableHeader().setOpaque(true);
        TablaMesasInscriptas.getTableHeader().setBackground(new Color(0, 153, 153));
        jScrollPane1.getViewport().setBackground(new Color(255, 255, 255)); //tabla color blanco
        TablaMesasInscriptas.getTableHeader().setReorderingAllowed(false);
        InscribirMesa();
        LlenarTablas();
    }

    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelCambiable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMesasInscriptas = new javax.swing.JTable();
        BorrarInscripcion = new javax.swing.JPanel();
        estudianteBL = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaInscriptos = new javax.swing.JTable();

        PanelCambiable.setBackground(new java.awt.Color(255, 255, 255));
        PanelCambiable.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaMesasInscriptas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TURNO", "AÃ‘O", "NOMBRE", "COD MATERIA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaMesasInscriptas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaMesasInscriptas.setFocusable(false);
        TablaMesasInscriptas.setRowHeight(25);
        TablaMesasInscriptas.setSelectionBackground(new java.awt.Color(118, 35, 47));
        TablaMesasInscriptas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMesasInscriptasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaMesasInscriptas);
        if (TablaMesasInscriptas.getColumnModel().getColumnCount() > 0) {
            TablaMesasInscriptas.getColumnModel().getColumn(0).setResizable(false);
            TablaMesasInscriptas.getColumnModel().getColumn(1).setResizable(false);
            TablaMesasInscriptas.getColumnModel().getColumn(2).setResizable(false);
            TablaMesasInscriptas.getColumnModel().getColumn(3).setResizable(false);
        }

        PanelCambiable.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 80, 330, 330));

        BorrarInscripcion.setBackground(new java.awt.Color(118, 35, 47));
        BorrarInscripcion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BorrarInscripcion.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        BorrarInscripcion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BorrarInscripcionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BorrarInscripcionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BorrarInscripcionMouseExited(evt);
            }
        });

        estudianteBL.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        estudianteBL.setForeground(new java.awt.Color(255, 255, 255));
        estudianteBL.setText("Borrar Inscripcion");
        estudianteBL.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout BorrarInscripcionLayout = new javax.swing.GroupLayout(BorrarInscripcion);
        BorrarInscripcion.setLayout(BorrarInscripcionLayout);
        BorrarInscripcionLayout.setHorizontalGroup(
            BorrarInscripcionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BorrarInscripcionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(estudianteBL)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BorrarInscripcionLayout.setVerticalGroup(
            BorrarInscripcionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BorrarInscripcionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(estudianteBL)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PanelCambiable.add(BorrarInscripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 430, -1, -1));

        TablaInscriptos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOMBRE", "APELLIDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaInscriptos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaInscriptos.setFocusable(false);
        TablaInscriptos.setRowHeight(25);
        TablaInscriptos.setSelectionBackground(new java.awt.Color(118, 35, 47));
        TablaInscriptos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaInscriptosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaInscriptos);
        if (TablaInscriptos.getColumnModel().getColumnCount() > 0) {
            TablaInscriptos.getColumnModel().getColumn(0).setResizable(false);
            TablaInscriptos.getColumnModel().getColumn(1).setResizable(false);
        }

        PanelCambiable.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 330, 330));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PanelCambiable, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PanelCambiable, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void TablaMesasInscriptasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMesasInscriptasMouseClicked

    }//GEN-LAST:event_TablaMesasInscriptasMouseClicked

    private void BorrarInscripcionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrarInscripcionMouseClicked
        Materia codMateriaaux=null;
        try {
            codMateriaaux = PlanEstudiosManager.buscarMateria(String.valueOf(TablaMesasInscriptas.getValueAt(TablaMesasInscriptas.getSelectedRow(),3)), codPlanEstudios);
        } catch (ManagementException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        String codigo=codPlanEstudios+"-"+codMateriaaux.getCodigo()+"-"+String.valueOf(LocalDate.now().getYear())+"-"+String.valueOf(LocalDate.now().getMonthValue());
        try {
            EstudianteManager.deleteInscripcion(codigo, nroRegistro);
        } catch (ManagementException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        LlenarTablas();
    }//GEN-LAST:event_BorrarInscripcionMouseClicked

    private void BorrarInscripcionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrarInscripcionMouseEntered

    }//GEN-LAST:event_BorrarInscripcionMouseEntered

    private void BorrarInscripcionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrarInscripcionMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_BorrarInscripcionMouseExited

    private void TablaInscriptosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaInscriptosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaInscriptosMouseClicked

    public void InscribirMesa(){
        String codigo=codPlanEstudios+"-"+codMateria+"-"+String.valueOf(LocalDate.now().getYear())+"-"+String.valueOf(LocalDate.now().getMonthValue());
        try {
            EstudianteManager.aÃ±adirInscripcion(codigo,nroRegistro);
        } catch (ManagementException ex) {
            JOptionPane.showMessageDialog(null, "Ya estas inscripto a la mesa!");
        }
    }
    
    public void LlenarTablas(){
        Materia codMateriaaux=null;
        String codigo=codPlanEstudios+"-"+codMateria+"-"+String.valueOf(LocalDate.now().getYear())+"-"+String.valueOf(LocalDate.now().getMonthValue());
        try {
            ArrayList<Estudiante> estudiantes = EstudianteManager.ObtenerInscriptosMesa(codigo);
            DefaultTableModel modelo = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }};
            modelo.setRowCount(0);
            modelo.addColumn("NOMBRE");
            modelo.addColumn("APELLIDO");   
            for (Estudiante estudiante : estudiantes) {
                modelo.addRow(new Object[]{estudiante.getNombre(),estudiante.getApellido()});
            }
            TablaInscriptos.setModel(modelo);
        } catch (ManagementException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        try {
            ArrayList<MesaExamen> mesas = EstudianteManager.obtenerMesasEstudiante(nroRegistro);
            DefaultTableModel modelo = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }};
            modelo.setRowCount(0);
            modelo.addColumn("TURNO");
            modelo.addColumn("AÃ‘O");
            modelo.addColumn("NOMBRE"); 
            modelo.addColumn("COD MATERIA"); 
            for (MesaExamen mesa : mesas) {
                try {
                    codMateriaaux = PlanEstudiosManager.buscarMateria(mesa.getCodMateria(), mesa.getCodPlanEstudios());
                    } catch (ManagementException ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());}
                modelo.addRow(new Object[]{mesa.getTurno(),mesa.getAnio(),codMateriaaux.getNombre(),mesa.getCodMateria()});
            }
            TablaMesasInscriptas.setModel(modelo);
        } catch (ManagementException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BorrarInscripcion;
    private javax.swing.JPanel PanelCambiable;
    private javax.swing.JTable TablaInscriptos;
    private javax.swing.JTable TablaMesasInscriptas;
    private javax.swing.JLabel estudianteBL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
